<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--声明注册springMVC的核心对象DispatcherServlet
    需要在tomcat服务器启动后，创建DispatcherServlet对象的实例
    DispatcherServlet在其创建过程中，会同时创建springMVC容器对象，读取springmvc的配置文件，
        并将配置文件中的对象创建好，当用户发起请求时便可使用对象了

   servlet的初始化会执行init()方法。DispatcherServlet在init()中{
        //创建容器，读取配置文件
        WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
        //将容器对象放入到ServletContext中
        getServiceContext().setAttribute(key,ctx);


        springmvc创建容器对象时，读取的默认配置文件是/WEB-INF/<servlet-name>-servlet.xml
   }

-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

<!--    自定义springmvc配置文件的位置-->
        <init-param>
            <!--自定义springmvc配置文件的位置属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定配置文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--    zaitomcat启动后，创建serclet对象
        load-on-startup表示tomcat启动后创建对象的顺序，值为整数，数值越小，tomcat创建对象的时间越早-->
        <load-on-startup>1</load-on-startup>

    </servlet>


     <servlet-mapping>
         <servlet-name>springmvc</servlet-name>
     <!--使用框架时，url-pattern可以使用两种值
         1、拓展名方式，*.xxxx，xxxx是自定义的拓展名
         常用方式*.do,*.action,*.mvc
            http://localhost:8080/springmvc/***.do
         2、使用斜杠"\"-->
         <url-pattern>*.do</url-pattern>
     </servlet-mapping>

<!--注册使用过滤器，解决post请求乱码问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--强制请求对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制应答对象(HttpServletResponse)使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
<!--
        /*表示强制所有的请求先通过过滤器处理
-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>