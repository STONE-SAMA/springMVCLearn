<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

<!--声明组件扫描器-->
    <context:component-scan base-package="controller"/>

<!--声明springMVC框架中的视图解析器，帮助开发人员设置试图文件的路径-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀：视图文件路径-->
        <property name="prefix" value="/WEB-INF/view/"/>
        <!--后缀：视图文件拓展名-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--第一种处理静态资源方式-->
<!--default-servlet-handler 和 @RequestMapping有冲突， 需要加入annotation-driven-->
<!--    <mvc:annotation-driven/>-->

<!--
    需要在springmvc配置文件中加入<mvc:default-servlet-handler>
        原理是加入这一标签后，框架会创建控制器对象DefaultServletHttpRequestHandler(类似于controller)
            DefaultServletHttpRequestHandler可以将接受的请求转发给tomcat的default这个servlet
    -->
<!--    <mvc:default-servlet-handler/>-->


    <!--第二种处理静态资源方式-->
<!--mvc:resources加入后会创建ResourceHttpRequestHandler这个处理器对象
    让这个处理器对象处理静态资源的访问，不依赖tomcat服务器
    mapping访问静态变量的uri地址，使用通配符**
    location静态资源在项目中的位置
-->
    <mvc:resources mapping="images/**" location="/images/"/>
    <mvc:resources mapping="html/**" location="/html/"/>
    <mvc:resources mapping="js/**" location="/js/"/>
    <!--mvc:resources 和 @RequestMapping有冲突， 需要加入annotation-driven-->
    <mvc:annotation-driven/>
<!--使用一个配置语句，指定多种静态资源的访问-->
<!--    <mvc:resources mapping="/static/**" location="/static/"/>-->

</beans>